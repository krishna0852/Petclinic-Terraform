//def proUrl = 'https://krishna0852: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@github.com/krishna0852/Petclinic-Terraform.git'
def repoName = "krishna0852/testing.git"
def protocol = "https://"
def credentialsid= 'tokencreds'
def proUrl = protocol +"krishna0852:" + getTokenCredentials(credentialsid) + "@github.com/" + repoName

//def data=getTokenCredentials(credentialsid)

echo "${proUrl}"

def getTokenCredentials(credentialsId){
    withCredentials([string(credentialsId: credentialsId, variable: 'token')]) {
       return token
}
}

def getGitBranches(String proUrl) {
    echo "$proUrl"
    def gitBranches = sh(script: "git ls-remote --heads ${proUrl}", returnStdout: true).trim()
    def masterBranch = gitBranches.replaceAll(/.*refs\/heads\/(\S+).*/, '$1')
   // echo "$masterBranch"
   // echo "writing error"
    //params.SELECT_BRANCH_TO_DEPLOY = masterBranch
    branches=masterBranch
    //echo "listing branches into branches-variable"
   // echo "$branches"
    return branches
}

node {
    branches=getGitBranches(proUrl)
}


pipeline{

    agent any  

    parameters {
        choice(name: 'selectedbranch', choices: branches, description: 'APP-ENV-TO-DEPLOY')
        choice(name: 'terraform', choices: ['Apply','Destroy'], description: 'Terraform Action')
        booleanParam(name: 'confirm', defaultValue: false, description: 'userconfirm')

    }


    stages{
        stage('pre-validation'){
            
            steps{
                 script{
                     echo 'entered pre-validation-script'
                    if(params.confirm==false)
                    {
                      error("user didn't check the confirm boolean parameter")
                    }
                    if(params.selectedbranch==''){
                        error('No branches to deploy')
                    }
                }
                 
            }
        } 

        stage("checkout") {
            steps {
               checkout scmGit(branches: [[name: selectedbranch]], extensions: [], userRemoteConfigs: [[url: 'https://github.com/krishna0852/testing.git']])   
            }
        }

       
        stage("Approval"){
             steps{
                  script {
                    
                   echo "entered into script"
                   def USER_INPUT = input(
                    message: "Are you sure you want to perform action terraform ${params.terraform} in ${params.selectedbranch} branch, Do you confirm?",
                    submitter: "approval" // you can pass the specific jenkins user names

                    )
                  }
            }
         }

         stage("terraform Action"){
            steps{
                script{
                     
                   echo "entered into script"
                   def USER_INPUT = input(
                    message: "Are you sure you want to perform action terraform ${params.terraform} in ${params.selectedbranch} branch, Do you confirm?",
                    parameters: [
                            [$class: 'ChoiceParameterDefinition',
                             choices: [params.terraform].join('\n'),
                             name: 'input',
                             description: 'Menu - select box option']
                    ],
                    submitter: "approval" // you can pass the specific jenkins user names
                    
                  

                    )

                     def yamlContent = readYaml(file: '/var/lib/jenkins/workspace/deploy/env.yaml')
                     def branch="${params.selectedbranch}"
                     
                     
                    if ("${branch}"=="dev") {
                        
                        //calling terraform apply
                        account_id=yamlContent.dev.accountid
                       // echo "${account_id}"
                        echo "Calling method"
                        terraformAction("${params.terraform}", "${account_id}")
                       
                     // sh  'terraformAction("apply", env.AWS_ACCOUNT_ID)'
                        // Add your actions here
                        echo 'print'
                    }
                    
                      else if ("${branch}"=="test") {
                        
                        //calling terraform apply
                        account_id=yamlContent.test.accountid
                       // echo "${account_id}"
                        echo "Calling method"
                        terraformAction("${params.terraform}", "${account_id}")
                       
                     // sh  'terraformAction("apply", env.AWS_ACCOUNT_ID)'
                        // Add your actions here
                        echo 'print'
                    }
                    
                     else if ("${branch}"=="prod") {
                        
                        //calling terraform apply
                        account_id=yamlContent.prod.accountid
                       // echo "${account_id}"
                        echo "Calling method"
                        terraformAction("${params.terraform}", "${account_id}")
                       
                     // sh  'terraformAction("apply", env.AWS_ACCOUNT_ID)'
                        // Add your actions here
                        echo 'print'
                    }
                    
                    
                    
                }
            }
         }



    } // stages-end-block
} //pipeline-end-block



def terraformAction(String action, String account_id){
    
    act="${action}"
    id= "${account_id}"
   
    echo "act terraform ...."
    echo "terraform $act for environment $id"
    //terraform apply --auto-approve
    echo "hi, from terraformAction method"
    sh "chmod +x infra.sh"
    sh "./infra.sh ${id}"
}
